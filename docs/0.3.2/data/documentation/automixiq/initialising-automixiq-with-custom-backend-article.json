{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Essentials","anchor":"Essentials","level":2},{"type":"paragraph","inlineContent":[{"text":"If your client application uses a custom backend to access track data and metadata, this document explains how to integrate AutomixIQ with your client application.","type":"text"}]},{"level":3,"text":"Initialization when you take the responsability of providing audio data and metadata","type":"heading","anchor":"Initialization-when-you-take-the-responsability-of-providing-audio-data-and-metadata"},{"type":"paragraph","inlineContent":[{"text":"In order to initialise AutomixIQ when you take the responsability of providing audio data and metadata you need a ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate","type":"reference","isActive":true},{"text":" and a ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStatusObserverDelegate","type":"reference","isActive":true},{"text":", plus a store ID, applicationId and a country code:","type":"text"}]},{"syntax":"swift","code":["func application(_ application: UIApplication, ","                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {","    \/\/ ...","","    let automixSDKStreamingDelegate: AutomixSDKStreamingDelegate = myAutomixSDKStreamingDelegate","    let automixSDKStatusObserverDelegate: AutomixSDKStatusObserverDelegate = myAutomixSDKStatusObserverDelegate","    let countryCode: String = myCountryCode \/\/ \"US\" ? \"AU\"?","    let storeId: String = myTunedStoreId","    let applicationId: String = myApplicationId","    AutomixSDK.initialise(streamingDelegate:automixSDKStreamingDelegate,","                          statusDelegate:automixSDKStatusObserverDelegate,","                          countryCode:countryCode,","                          storeId:storeId,","                          applicationId:applicationId)","    { error in","        if error != nil {","            \/\/ This means you are fobidden to use the Automix SDK or you have no internet connection.","            return","        }","        \/\/ The Automix SDK public functions can be used from this point onwards :)","    }","","    \/\/ ...","}"],"type":"codeListing"},{"anchor":"AutomixSDKStreamingDelegate","type":"heading","level":4,"text":"AutomixSDKStreamingDelegate"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If your custom backend puts fetching metadata and track data behing a login, AutomixIQ needs to know if the user in your aspplication is logged in or not via","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/isLoggedIn()"}]}]}],"type":"unorderedList"},{"code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func isLoggedIn() {","        return self.loggedIn","    }","    \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If your custom backend only allows playback on a device under certain conditions (for instance in only allows one device to play at any given time), AutomixIQ needs to know if a device is allowed to play via"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/asyncCheckDeviceStatus(completion:)","isActive":true,"type":"reference"}]}]}],"type":"unorderedList"},{"code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func asyncCheckDeviceStatus(completion: @escaping (_ error: Error?, _ canContinuePlaying: Bool) -> Void) {","        self.canDeviceContinuePlaying() { allowedToPlay in","            return allowedToPlay","        }","    }","    \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"AutomixIQ requires devices to have a unique identifier, provided via","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/getDeviceIdentifier()","isActive":true,"type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func getDeviceIdentifier() -> String {","        return self.deviceIdentifier","    }","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"This delegate also provides hooks to inject cached track audio data and metadata, to shortcut for efficiency and prevent AutomixIQ from querying audio data and metadata to your custom backend if they are already available. This also enables offline playback when all required data is available on device."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This is done via ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/syncGetTrackMetadata(trackId:)","isActive":true}]},{"code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func syncGetTrackMetadata(trackId: String?) -> AutomixIQ.AutomixSDKTrackModel? {","        \/\/ If I have this track cached, I should be able to tell its metadata","        if self.isTrackCached(trackId) == false {","            return nil","        }","        return self.metadataForTrack(trackId)","    }","    ","    public func syncIsTrackExplicit(trackId: String?) -> NSNumber? {","        \/\/ If I have this track cached, I should be able to tell if its lyrics are explicit","        return self.isTrackExplicit(trackId)","    }","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/syncGetCachedTrack(trackId:)"}]},{"type":"codeListing","syntax":"swift","code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func syncGetCachedTrack(trackId: String) -> Data? {","        \/\/ If I have this track cached, I should be able to decrypt it and send the data","        if self.isTrackCached(trackId) == false {","            return nil","        }","        return self.unencryptedDataForTrack(trackId)","    }","    \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At any time, when track metadata is available, this delegate can store for later use via"},{"type":"text","text":" "},{"text":"``AutomixSDKStreamingDelegate\/cacheMetadata(_:)`","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func cacheMetadata(_ metadata: [AutomixSDKTrackModel]) -> Data? {","        self.metadataForTrack[metadata.trackId] = metadata","    }","    \/\/ ...","}"]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"AutomixIQ will download the trackmetadata as it needs it. When Pacemaker requires to download track metadata, it will do so via"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/asyncGetTrackMetadata(trackId:completion:)","isActive":true,"type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func asyncGetTrackMetadata(trackId: String, completion: @escaping (_ error: Error?, _ track: AutomixSDKTrackModel?) -> Void) {","        self.getTrackMetadata(trackId: trackId) { error, trackMetadata in","            let automixSDKTrackModel = translateMetadata(trackMetadata)","            return completion(error, automixSDKTrackModel)","        }","    }","","    public func asyncIsTrackExplicit(trackId: String, completion: @escaping (_ error: Error?, _ isExplicit: Bool) -> Void) {","        self.isTrackExplicit(trackId: trackId) { error, isTrackExplicit in","            return completion(error, isTrackExplicit)","        }","    }","","    \/\/ ...","}"],"syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When AutomixIQ needs to download a track, it will ask for the url for it. It supports sessionID if you want urls to expire and return 403s. It will do so via"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)"}]}]}]},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func asyncGetStream(streamingDeviceId: String, sessionId: String, trackId: String, completion: @escaping (_ error: Error?, _ url: String?, _ newSessionId: String?, _ reportingURLS: Beacons?) -> Void) {","        self.getTrackURL(deviceId: streamingDeviceId, sessionId: sessionId, trackId: trackId) { error, url in ","            return completion(error, url)","        }","    }","    \/\/ ...","}"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"When a track finished downloading, AutomixIQ will pass the audio data for you to cache if you need it. This is done via"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/trackCompletedDownload(trackId:data:)"}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func trackCompletedDownload(trackId: String, data: NSData) {","        self.cacheTrack(trackId: trackId, data: data)","    }","    \/\/ ...","}"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"As a track is being downloaded, AutomixIQ will report download progress via","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/trackBufferingProgress(trackId:progress:)","isActive":true,"type":"reference"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["public class MyAutomixSDKStreamingDelegate: NSObject, AutomixSDKStreamingDelegate {","    \/\/ ...","    public func trackBufferingProgress(trackId: String, progress: Swift.Float) {","        self.updateTrackDownloadProgress(trackId: trackId, progress: progress)","    }","    \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Do keep in mind this download is done lazily, as AutomixIQ requires data for analysis \/ playback. There is no guarantee a track will download in its entirety if the track is not played in its entirety."}]},{"text":"AutomixSDKStatusObserverDelegate","anchor":"AutomixSDKStatusObserverDelegate","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStatusObserverDelegate","isActive":true},{"text":" is responsible for updating your player’s UI, please refer to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Updating-custom-player's-UI-article"}],"type":"paragraph"},{"type":"heading","text":"Checking if AutomixIQ is initialised","level":3,"anchor":"Checking-if-AutomixIQ-is-initialised"},{"inlineContent":[{"text":"To check wether AutomixIQ is currently initialised, use","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDK\/initialised()","type":"reference"}]}]}],"type":"unorderedList"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"Initializing AutomixIQ with custom backend","modules":[{"name":"AutomixIQ"}]},"hierarchy":{"paths":[["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Initialising-AutomixIQ-with-custom-backend-article"},"kind":"article","abstract":[{"text":"How to validate my client and start using the AutomixIQ APIs with a custom backend","type":"text"}],"sections":[],"seeAlsoSections":[{"generated":true,"title":"Initializing AutomixIQ for use with a custom backend","identifiers":["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate","doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKLogLevel"]}],"variants":[{"paths":["\/documentation\/automixiq\/initialising-automixiq-with-custom-backend-article"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/automixiq\/initialising-automixiq-with-custom-backend-article"],"traits":[{"interfaceLanguage":"occ"}]}],"references":{"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)":{"navigatorTitle":[{"kind":"identifier","text":"asyncGetStreamWithStreamingDeviceId:sessionId:trackId:completion:"}],"type":"topic","required":true,"role":"symbol","abstract":[{"type":"text","text":"Called by AutomixSDK to obtain the URL to stream audio from, as well as a sessionId if the URL is to be salted with one, and the URL to report playback events in case that is required."}],"url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/asyncgetstream(streamingdeviceid:sessionid:trackid:completion:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asyncGetStream"},{"kind":"text","text":"("},{"kind":"externalParam","text":"streamingDeviceId"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"text":"sessionId","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"trackId","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"url","kind":"internalParam"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"newSessionId"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)","kind":"symbol","title":"asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/syncGetCachedTrack(trackId:)":{"required":true,"role":"symbol","url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/syncgetcachedtrack(trackid:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/syncGetCachedTrack(trackId:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"syncGetCachedTrack"},{"kind":"text","text":"("},{"kind":"externalParam","text":"trackId"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Data","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV"},{"text":"?","kind":"text"}],"kind":"symbol","title":"syncGetCachedTrack(trackId:)","navigatorTitle":[{"text":"syncGetCachedTrackWithTrackId:","kind":"identifier"}],"abstract":[{"type":"text","text":"Called by AutomixSDK before attempting to download a track to give an opportunity to retrieve the entire unencrypted track."}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/asyncGetTrackMetadata(trackId:completion:)":{"required":true,"role":"symbol","url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/asyncgettrackmetadata(trackid:completion:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/asyncGetTrackMetadata(trackId:completion:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asyncGetTrackMetadata","kind":"identifier"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"track","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@AutomixIQ@objc(cs)AutomixSDKTrackModel","kind":"typeIdentifier","text":"AutomixSDKTrackModel"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"title":"asyncGetTrackMetadata(trackId:completion:)","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"asyncGetTrackMetadataWithTrackId:completion:"}],"abstract":[{"type":"text","text":"Called by AutomixSDK whe it requires the metadata of a track in order to load it."}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/getDeviceIdentifier()":{"navigatorTitle":[{"text":"getDeviceIdentifier","kind":"identifier"}],"type":"topic","required":true,"role":"symbol","abstract":[{"type":"text","text":"Called by AutomixSDK to learn of the identity of the device requesting to stream audio, for those services that require it."},{"text":" ","type":"text"},{"type":"text","text":"An example would be, a service that only allows one device to stream at any one time, would need to know the identity of the device to provide the stream."}],"url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/getdeviceidentifier()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getDeviceIdentifier","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/getDeviceIdentifier()","title":"getDeviceIdentifier()"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate":{"navigatorTitle":[{"kind":"identifier","text":"AutomixSDKStreamingDelegate"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutomixSDKStreamingDelegate"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate","kind":"symbol","title":"AutomixSDKStreamingDelegate","url":"\/documentation\/automixiq\/automixsdkstreamingdelegate","type":"topic","role":"symbol","abstract":[{"text":"AutomixSDKStreamingDelegate protocol defines the methods to be implemented by a class tasked with providing the Automix SDK the information it requires to play content.","type":"text"},{"type":"text","text":" "},{"text":"See TunedDemoStreamingHandler for an example of an object implementing this protocol.","type":"text"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/trackCompletedDownload(trackId:data:)":{"required":true,"role":"symbol","url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/trackcompleteddownload(trackid:data:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/trackCompletedDownload(trackId:data:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"trackCompletedDownload","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"trackId"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:objc(cs)NSData","text":"NSData","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"trackCompletedDownload(trackId:data:)","kind":"symbol","navigatorTitle":[{"text":"trackCompletedDownloadWithTrackId:data:","kind":"identifier"}],"abstract":[{"type":"text","text":"Called by AutomixSDK when a track has been fully downloaded."},{"type":"text","text":" "},{"type":"text","text":"A sample use case would be, for instance, allowing for encrypted on-device caching of downloaded tracks."}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/Updating-custom-player's-UI-article":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Updating-custom-player's-UI-article","title":"Updating custom player’s UI","abstract":[{"type":"text","text":"How to create a UI to reflect the AutomixIQ player"}],"url":"\/documentation\/automixiq\/updating-custom-player's-ui-article"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/trackBufferingProgress(trackId:progress:)":{"required":true,"role":"symbol","url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/trackbufferingprogress(trackid:progress:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/trackBufferingProgress(trackId:progress:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"trackBufferingProgress","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"trackId"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"text":"progress","kind":"externalParam"},{"text":": Swift","kind":"text"},{"kind":"text","text":"."},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"kind":"text","text":")"}],"kind":"symbol","title":"trackBufferingProgress(trackId:progress:)","navigatorTitle":[{"text":"trackBufferingProgressWithTrackId:progress:","kind":"identifier"}],"abstract":[{"type":"text","text":"Called by AutomixSDK when a track download progress has changed."}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDK/initialised()":{"type":"topic","title":"initialised()","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initialised","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"navigatorTitle":[{"text":"initialised","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Returns the initialised status of the Automix SDK.","type":"text"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDK\/initialised()","kind":"symbol","url":"\/documentation\/automixiq\/automixsdk\/initialised()"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStatusObserverDelegate":{"navigatorTitle":[{"text":"AutomixSDKStatusObserverDelegate","kind":"identifier"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStatusObserverDelegate","url":"\/documentation\/automixiq\/automixsdkstatusobserverdelegate","role":"symbol","kind":"symbol","type":"topic","title":"AutomixSDKStatusObserverDelegate","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutomixSDKStatusObserverDelegate","kind":"identifier"}],"abstract":[{"type":"text","text":"AutomixSDKStatusObserverDelegate protocol defines the methods to be implemented by a class tasked with observing the status of Automix SDK to reflect it on a UI."}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/asyncCheckDeviceStatus(completion:)":{"required":true,"role":"symbol","url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/asynccheckdevicestatus(completion:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/asyncCheckDeviceStatus(completion:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"asyncCheckDeviceStatus","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"completion"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"error","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":"?, "},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"canContinuePlaying"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"kind":"symbol","title":"asyncCheckDeviceStatus(completion:)","navigatorTitle":[{"text":"asyncCheckDeviceStatusWithCompletion:","kind":"identifier"}],"abstract":[{"type":"text","text":"Called by AutomixSDK regularly while something is being played"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/syncGetTrackMetadata(trackId:)":{"navigatorTitle":[{"text":"syncGetTrackMetadataWithTrackId:","kind":"identifier"}],"type":"topic","required":true,"role":"symbol","abstract":[{"text":"Called by AutomixSDK before attempting to download a track to give an opportunity to retrieve the required data from an on-device cache or any other synchronous method","type":"text"}],"url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/syncgettrackmetadata(trackid:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"syncGetTrackMetadata","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"trackId"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@AutomixIQ@objc(cs)AutomixSDKTrackModel","text":"AutomixSDKTrackModel"},{"text":"?","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/syncGetTrackMetadata(trackId:)","title":"syncGetTrackMetadata(trackId:)"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ":{"kind":"symbol","url":"\/documentation\/automixiq","role":"collection","title":"AutomixIQ","abstract":[{"type":"text","text":"Provide seamless transitions between tracks and beat-matched seek experience within your music player application in iOS, iPad."}],"type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStreamingDelegate/isLoggedIn()":{"required":true,"navigatorTitle":[{"kind":"identifier","text":"isLoggedIn"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"isLoggedIn"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate\/isLoggedIn()","kind":"symbol","title":"isLoggedIn()","url":"\/documentation\/automixiq\/automixsdkstreamingdelegate\/isloggedin()","type":"topic","role":"symbol","abstract":[{"text":"Called by AutomixSDK to learn if it is allowed to stram content that is protected by some fomr of authentication.","type":"text"},{"type":"text","text":" "},{"text":"An example is, an implementation via an API behind OAuth would return true if access and refresh tokens are available, false otherwise","type":"text"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKLogLevel":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AutomixSDKLogLevel","kind":"identifier"}],"url":"\/documentation\/automixiq\/automixsdkloglevel","abstract":[],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKLogLevel","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AutomixSDKLogLevel"}],"title":"AutomixSDKLogLevel"}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","value":"occ","op":"replace"},{"value":null,"op":"add","path":"\/topicSections"},{"op":"replace","path":"\/seeAlsoSections","value":[{"generated":true,"identifiers":["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStreamingDelegate","doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKLogLevel"],"title":"Initializing AutomixIQ for use with a custom backend"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)\/title","op":"replace","value":"asyncGetStreamWithStreamingDeviceId:sessionId:trackId:completion:"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1asyncGetStream(streamingDeviceId:sessionId:trackId:completion:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"asyncGetStreamWithStreamingDeviceId:sessionId:trackId:completion:","kind":"identifier"}]},{"op":"replace","value":"syncGetCachedTrackWithTrackId:","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1syncGetCachedTrack(trackId:)\/title"},{"value":[{"text":"- ","kind":"text"},{"text":"syncGetCachedTrackWithTrackId:","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1syncGetCachedTrack(trackId:)\/fragments"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1asyncGetTrackMetadata(trackId:completion:)\/title","op":"replace","value":"asyncGetTrackMetadataWithTrackId:completion:"},{"op":"replace","value":[{"text":"- ","kind":"text"},{"text":"asyncGetTrackMetadataWithTrackId:completion:","kind":"identifier"}],"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1asyncGetTrackMetadata(trackId:completion:)\/fragments"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1getDeviceIdentifier()\/title","value":"getDeviceIdentifier"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1getDeviceIdentifier()\/fragments","value":[{"text":"- ","kind":"text"},{"text":"getDeviceIdentifier","kind":"identifier"}],"op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate\/title","value":"AutomixSDKStreamingDelegate"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate\/fragments","value":[{"text":"AutomixSDKStreamingDelegate","kind":"identifier"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1trackCompletedDownload(trackId:data:)\/title","op":"replace","value":"trackCompletedDownloadWithTrackId:data:"},{"value":[{"kind":"text","text":"- "},{"text":"trackCompletedDownloadWithTrackId:data:","kind":"identifier"}],"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1trackCompletedDownload(trackId:data:)\/fragments","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1trackBufferingProgress(trackId:progress:)\/title","value":"trackBufferingProgressWithTrackId:progress:","op":"replace"},{"op":"replace","value":[{"text":"- ","kind":"text"},{"text":"trackBufferingProgressWithTrackId:progress:","kind":"identifier"}],"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1trackBufferingProgress(trackId:progress:)\/fragments"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDK~1initialised()\/title","op":"replace","value":"initialised"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDK~1initialised()\/fragments","value":[{"text":"+ ","kind":"text"},{"text":"initialised","kind":"identifier"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStatusObserverDelegate\/title","op":"replace","value":"AutomixSDKStatusObserverDelegate"},{"op":"replace","value":[{"text":"AutomixSDKStatusObserverDelegate","kind":"identifier"}],"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStatusObserverDelegate\/fragments"},{"op":"replace","value":"asyncCheckDeviceStatusWithCompletion:","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1asyncCheckDeviceStatus(completion:)\/title"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1asyncCheckDeviceStatus(completion:)\/fragments","value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"asyncCheckDeviceStatusWithCompletion:"}]},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1syncGetTrackMetadata(trackId:)\/title","value":"syncGetTrackMetadataWithTrackId:"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1syncGetTrackMetadata(trackId:)\/fragments","value":[{"kind":"text","text":"- "},{"kind":"identifier","text":"syncGetTrackMetadataWithTrackId:"}]},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1isLoggedIn()\/title","value":"isLoggedIn"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStreamingDelegate~1isLoggedIn()\/fragments","op":"replace","value":[{"kind":"text","text":"- "},{"text":"isLoggedIn","kind":"identifier"}]},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKLogLevel\/title","value":"AutomixSDKLogLevel","op":"replace"},{"op":"replace","value":[{"text":"AutomixSDKLogLevel","kind":"identifier"}],"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKLogLevel\/fragments"}],"traits":[{"interfaceLanguage":"occ"}]}]}