{"metadata":{"role":"article","modules":[{"name":"AutomixIQ"}],"title":"Initializing AutomixIQ","roleHeading":"Article"},"kind":"article","identifier":{"url":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Initialising-AutomixIQ-article","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Initializing AutomixIQ for use with Tuned Global’s APIs","identifiers":["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate","doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider"],"generated":true}],"primaryContentSections":[{"content":[{"type":"heading","text":"Essentials","level":2,"anchor":"Essentials"},{"inlineContent":[{"text":"If your client application is already using Tuned Global’s backend to access track data and metadata, this document explains how to integrate AutomixIQ with your client application.","type":"text"}],"type":"paragraph"},{"text":"Initialization when you use Tuned Global’s APIs and to access audio data and metadata","level":3,"type":"heading","anchor":"Initialization-when-you-use-Tuned-Globals-APIs-and-to-access-audio-data-and-metadata"},{"type":"paragraph","inlineContent":[{"text":"In order to initialise AutomixIQ against Tuned Global’s APIs and services you need a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate"},{"text":", an optional ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider","isActive":true},{"type":"text","text":" and a "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStatusObserverDelegate","isActive":true,"type":"reference"},{"text":", plus a store ID, applicationId and a country code.","type":"text"}]},{"code":["func application(_ application: UIApplication, ","                   didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {","    \/\/ ...","","    let tunedRestDelegate: TunedRestDelegate = myTunedRestDelegate","    let cachedMusicProvider: AutomixSDKCachedMusicProvider = myCachedMusicProvider","    let automixSDKStatusObserverDelegate: AutomixSDKStatusObserverDelegate = myAutomixSDKStatusObserverDelegate","    let countryCode: String = myCountryCode \/\/ \"US\" ? \"AU\"?","    let storeId: String = myTunedStoreId","    let applicationId: String = myApplicationId","    AutomixSDK.initialise(tunedDelegate: tunedRestDelegate,","                          statusDelegate: automixSDKStatusObserverDelegate,","                          countryCode: countryCode,","                          storeId: storeId,","                          applicationId: applicationId, ","                          cachedMusicProvider: cachedMusicProvider)","    { error in","        \/\/ If you support music cache or offline playback, add the data provider:","        AutomixSDK.setCachedMusicProvider(cachedMusicProvider)","        if error != nil {","            \/\/ This means you are fobidden to use the Automix SDK or you have no internet connection.","            return","        }","        \/\/ The Automix SDK public functions can be used from this point onwards :)","    }","","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"anchor":"TunedRestDelegate","type":"heading","level":4,"text":"TunedRestDelegate"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AutomixIQ requires your client’s access & refresh tokens in order to take over playback, provided via"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/tunedRestTokenExpired(deviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:)","type":"reference","isActive":true}]}]}]},{"type":"codeListing","syntax":"swift","code":["public class MyTunedRestDelegate: NSObject, TunedRestDelegate {","    \/\/ ...","    public func tunedRestTokenExpired(deviceIdentifierForVendor: String, countryCode: String,","                                      tunedUserId: String?,","                                      oldAccessToken: String?, refreshToken: String?, tokenType: String?,","                                      completion: @escaping (Error?, TunedAuthenticationResponse?, _ tunedUserId: String?) -> Void)","    {","        let response: TunedAuthenticationResponse = TunedAuthenticationResponse.init()","        response.access_token = myAccessToken","        response.token_type = myTokenType","        response.expires_in = myTokenExpiresIn","        response.refresh_token = myRefreshToken","        response.tuned_user_id = myTunedUserId","        completion(response, nil)","    }","    \/\/ ...","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AutomixIQ requires your client’s authenticated device, provided via"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/asyncGetAuthenticatedDevice(deviceIdentifierForVendor:completion:)","isActive":true,"type":"reference"}]}]}]},{"code":["public class MyTunedRestDelegate: NSObject, TunedRestDelegate {","    \/\/ ...","    public func asyncGetAuthenticatedDevice(deviceIdentifierForVendor: String, completion: @escaping (_ error: Error?, _ tunedDeviceId: String?) -> Void) -> Void {","        \/\/ ...","        let myTunedDeviceId = String(tunedDeviceId)","        return completion(nil, myTunedDeviceId)","    }","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AutomixIQ requires a unique device identifier, generally the identifierForVendor provided by Apple should work: Provided via"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/uniqueDeviceIdentifier()","isActive":true}]}]}]},{"code":["public class MyTunedRestDelegate: NSObject, TunedRestDelegate {","    \/\/ ...","    public func uniqueDeviceIdentifier() -> Void) -> String {","        \/\/ ...","        let myUniqueIdentifier = String(identifierForVendor)","        return myUniqueIdentifier","    }","    \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you need access to the AutomixIQ log in order to debug your implementation, you can print its output via this delegate as well. You can do that via"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/logAutomixSDKMessage(logLevel:message:)","type":"reference"}]}]}],"type":"unorderedList"},{"syntax":"swift","code":["public class MyTunedRestDelegate: NSObject, TunedRestDelegate {","    \/\/ ...","    public func logAutomixSDKMessage(logLevel: AutomixSDKLogLevel, message: String) {","        #if DEBUG","            NSLog(message)","        #endif","    }","    \/\/ ...","}"],"type":"codeListing"},{"level":4,"type":"heading","anchor":"AutomixSDKCachedMusicProvider","text":"AutomixSDKCachedMusicProvider"},{"type":"paragraph","inlineContent":[{"text":"PacenmakerAutomix can be used for offline playback using cached music data. In order to provide and update cached music data and metadata, set the ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider","type":"reference","isActive":true},{"text":" of AutomixSDK using ","type":"text"},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDK\/setCachedMusicProvider(_:)","type":"reference","isActive":true},{"type":"text","text":". This is optional and can be nil."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This provides hooks to inject cached track audio data and metadata, to shortcut for efficiency and prevent AutomixIQ from querying audio data and metadata to Tuned Global’s APIs if they are already available. This also enables offline playback when all required data is available on device"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is done via "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/syncGetTrackMetadata(trackId:)","type":"reference","isActive":true}]},{"type":"codeListing","code":["public class MyCachedMusicProvider: NSObject, AutomixSDKCachedMusicProvider {","    \/\/ ...","    public func syncGetTrackMetadata(trackId: String?) -> AutomixIQ.AutomixSDKTrackModel? {","        \/\/ If I have this track cached, I should be able to tell its metadata","        if self.isTrackCached(trackId) == false {","            return nil","        }","        return self.metadataForTrack(trackId)","    }"," ","    public func syncIsTrackExplicit(trackId: String?) -> NSNumber? {","        \/\/ If I have this track cached, I should be able to tell if its lyrics are explicit","        return self.isTrackExplicit(trackId)","    }","    \/\/ ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"and "},{"isActive":true,"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/syncGetCachedTrack(trackId:)","type":"reference"}]},{"syntax":"swift","code":["public class MyCachedMusicProvider: NSObject, AutomixSDKCachedMusicProvider {","    \/\/ ...","    public func syncGetCachedTrack(trackId: String) -> Data? {","        \/\/ If I have this track cached, I should be able to decrypt it and send the data","        if self.isTrackCached(trackId) == false {","            return nil","        }","        return self.unencryptedDataForTrack(trackId)","    }","    \/\/ ...","}"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"AutomixIQ will download the tracks it needs to play when they are not provided frtom your cache. It will do so lazizly (as playback or analysis requires). When a track finished downloading, AutomixIQ will pass the audio data for you to cache if you need it. This is done via","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/trackFinishedDownloading(trackId:data:)","isActive":true,"type":"reference"}],"type":"paragraph"}]}]},{"code":["public class MyCachedMusicProvider: NSObject, AutomixSDKCachedMusicProvider {","    \/\/ ...","    public func tunedTrackFinishedDownloading(trackId: String, data: Data) {","        \/\/ Automix SDK finished downloading a track. If I have offline playback or encrypted cache capabilities I should act accordingly here","        return self.cacheTrack(trackId, data:data)","    }","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AutomixIQ will also notify your delegate of download progress. This is done via"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/trackBufferingProgress(trackId:progress:)"}]}]}]},{"syntax":"swift","code":["public class MyCachedMusicProvider: NSObject, AutomixSDKCachedMusicProvider {","    \/\/ ...","    public func trackBufferingProgress(trackId: String, progress: Swift.Float) {","        self.updateTrackDownloadProgress(identifier: trackId, progress: progress)","        return","    }","    \/\/ ...","}"],"type":"codeListing"},{"text":"AutomixSDKStatusObserverDelegate","type":"heading","anchor":"AutomixSDKStatusObserverDelegate","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStatusObserverDelegate","isActive":true},{"type":"text","text":" is responsible for updating your player’s UI, please refer to "},{"type":"reference","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Updating-custom-player's-UI-article","isActive":true}]},{"anchor":"Checking-if-AutomixIQ-is-initialised","type":"heading","text":"Checking if AutomixIQ is initialised","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check wether AutomixIQ is currently initialised, use"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDK\/initialised()","isActive":true,"type":"reference"}],"type":"paragraph"}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ"]]},"variants":[{"paths":["\/documentation\/automixiq\/initialising-automixiq-article"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/automixiq\/initialising-automixiq-article"],"traits":[{"interfaceLanguage":"occ"}]}],"sections":[],"abstract":[{"type":"text","text":"How to validate my client and start using the AutomixIQ APIs with Tuned Global APIs"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKCachedMusicProvider":{"url":"\/documentation\/automixiq\/automixsdkcachedmusicprovider","navigatorTitle":[{"kind":"identifier","text":"AutomixSDKCachedMusicProvider"}],"role":"symbol","type":"topic","title":"AutomixSDKCachedMusicProvider","abstract":[{"type":"text","text":"TunedRestDelegate protocol defines the methods to be implemented by a class tasked with storing cached track data"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AutomixSDKCachedMusicProvider","kind":"identifier"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider","kind":"symbol"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKCachedMusicProvider/trackBufferingProgress(trackId:progress:)":{"abstract":[{"text":"Called by AutomixSDK when a track download progress has changed.","type":"text"}],"required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trackBufferingProgress"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"trackId"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"progress","kind":"externalParam"},{"kind":"text","text":": Swift"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sf","kind":"typeIdentifier","text":"Float"},{"text":")","kind":"text"}],"navigatorTitle":[{"text":"trackBufferingProgressWithTrackId:progress:","kind":"identifier"}],"url":"\/documentation\/automixiq\/automixsdkcachedmusicprovider\/trackbufferingprogress(trackid:progress:)","kind":"symbol","type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/trackBufferingProgress(trackId:progress:)","role":"symbol","title":"trackBufferingProgress(trackId:progress:)"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDK/initialised()":{"type":"topic","title":"initialised()","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initialised","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"navigatorTitle":[{"text":"initialised","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Returns the initialised status of the Automix SDK.","type":"text"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDK\/initialised()","kind":"symbol","url":"\/documentation\/automixiq\/automixsdk\/initialised()"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/TunedRestDelegate/asyncGetAuthenticatedDevice(deviceIdentifierForVendor:completion:)":{"url":"\/documentation\/automixiq\/tunedrestdelegate\/asyncgetauthenticateddevice(deviceidentifierforvendor:completion:)","required":true,"role":"symbol","navigatorTitle":[{"text":"asyncGetAuthenticatedDeviceWithDeviceIdentifierForVendor:completion:","kind":"identifier"}],"type":"topic","title":"asyncGetAuthenticatedDevice(deviceIdentifierForVendor:completion:)","abstract":[{"type":"text","text":"Called by AutomixSDK while initialising to give you an opportunity to provide the authenticated device ID or perform device authentication as you wish."},{"type":"text","text":" "},{"type":"text","text":"If not implemented Automix SDK will proceed to register a device for the logged in user with deviceType: “iPhone”, displayName: “AutomixSDK” and deviceOS: “iOS”."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"asyncGetAuthenticatedDevice","kind":"identifier"},{"text":"(","kind":"text"},{"text":"deviceIdentifierForVendor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"completion","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"error"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":"?, "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"tunedDeviceId","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/asyncGetAuthenticatedDevice(deviceIdentifierForVendor:completion:)","kind":"symbol"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKCachedMusicProvider/syncGetTrackMetadata(trackId:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"syncGetTrackMetadata","kind":"identifier"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"AutomixSDKTrackModel","preciseIdentifier":"c:@M@AutomixIQ@objc(cs)AutomixSDKTrackModel"},{"text":"?","kind":"text"}],"navigatorTitle":[{"text":"syncGetTrackMetadataWithTrackId:","kind":"identifier"}],"url":"\/documentation\/automixiq\/automixsdkcachedmusicprovider\/syncgettrackmetadata(trackid:)","title":"syncGetTrackMetadata(trackId:)","type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/syncGetTrackMetadata(trackId:)","required":true,"abstract":[{"type":"text","text":"Called by AutomixSDK before attempting to download a track to give an opportunity to retrieve the required data from an on-device cache or any other synchronous method"}],"kind":"symbol"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/TunedRestDelegate/uniqueDeviceIdentifier()":{"title":"uniqueDeviceIdentifier()","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/uniqueDeviceIdentifier()","role":"symbol","required":true,"url":"\/documentation\/automixiq\/tunedrestdelegate\/uniquedeviceidentifier()","type":"topic","navigatorTitle":[{"text":"uniqueDeviceIdentifier","kind":"identifier"}],"abstract":[{"type":"text","text":"Called by Automix SDK to learn the unique identifier for a device as a string."},{"text":" ","type":"text"},{"type":"text","text":"On iOS this is generally the Identifier for Vendor."},{"type":"text","text":" "},{"type":"text","text":"It can be any string as long as it is unique"},{"text":" ","type":"text"},{"text":"Automix SDK will use this string as the UniqueId if it needs to register the device for playback","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"uniqueDeviceIdentifier"},{"text":"() -> ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKCachedMusicProvider/syncGetCachedTrack(trackId:)":{"navigatorTitle":[{"text":"syncGetCachedTrackWithTrackId:","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/syncGetCachedTrack(trackId:)","title":"syncGetCachedTrack(trackId:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"syncGetCachedTrack"},{"text":"(","kind":"text"},{"text":"trackId","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":") -> ","kind":"text"},{"text":"Data","preciseIdentifier":"s:10Foundation4DataV","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Called by AutomixSDK before attempting to download a track to give an opportunity to retrieve the entire unencrypted track."}],"role":"symbol","required":true,"kind":"symbol","url":"\/documentation\/automixiq\/automixsdkcachedmusicprovider\/syncgetcachedtrack(trackid:)"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDK/setCachedMusicProvider(_:)":{"type":"topic","title":"setCachedMusicProvider(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"setCachedMusicProvider","kind":"identifier"},{"text":"(","kind":"text"},{"text":"AutomixSDKCachedMusicProvider","kind":"typeIdentifier","preciseIdentifier":"c:@M@AutomixIQ@objc(pl)AutomixSDKCachedMusicProvider"},{"text":")","kind":"text"}],"navigatorTitle":[{"text":"setCachedMusicProvider:","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Add a new music cache delegate","type":"text"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDK\/setCachedMusicProvider(_:)","kind":"symbol","url":"\/documentation\/automixiq\/automixsdk\/setcachedmusicprovider(_:)"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/TunedRestDelegate/tunedRestTokenExpired(deviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:)":{"type":"topic","required":true,"title":"tunedRestTokenExpired(deviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:)","role":"symbol","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/tunedRestTokenExpired(deviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:)","navigatorTitle":[{"text":"tunedRestTokenExpiredWithDeviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:","kind":"identifier"}],"url":"\/documentation\/automixiq\/tunedrestdelegate\/tunedresttokenexpired(deviceidentifierforvendor:countrycode:tuneduserid:oldaccesstoken:refreshtoken:tokentype:completion:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"tunedRestTokenExpired"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"deviceIdentifierForVendor"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"countryCode","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tunedUserId"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"?, ","kind":"text"},{"text":"oldAccessToken","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"refreshToken"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":"?, ","kind":"text"},{"text":"tokenType","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"completion"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"error","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"credentials","kind":"internalParam"},{"kind":"text","text":": "},{"text":"TunedAuthenticationResponse","preciseIdentifier":"c:@M@AutomixIQ@objc(cs)TunedAuthenticationResponse","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"tunedUserId","kind":"internalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"text":"Called by AutomixSDK when initialised against a Tuned Global backend upon initialisation, or when its access token has expired.","type":"text"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKCachedMusicProvider/trackFinishedDownloading(trackId:data:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"trackFinishedDownloading"},{"kind":"text","text":"("},{"text":"trackId","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation4DataV","text":"Data","kind":"typeIdentifier"},{"text":")","kind":"text"}],"navigatorTitle":[{"kind":"identifier","text":"trackFinishedDownloadingWithTrackId:data:"}],"url":"\/documentation\/automixiq\/automixsdkcachedmusicprovider\/trackfinisheddownloading(trackid:data:)","title":"trackFinishedDownloading(trackId:data:)","type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider\/trackFinishedDownloading(trackId:data:)","required":true,"abstract":[{"type":"text","text":"Called by AutomixSDK when a track has been fully downloaded."}],"kind":"symbol"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ":{"kind":"symbol","url":"\/documentation\/automixiq","role":"collection","title":"AutomixIQ","abstract":[{"type":"text","text":"Provide seamless transitions between tracks and beat-matched seek experience within your music player application in iOS, iPad."}],"type":"topic","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/TunedRestDelegate":{"url":"\/documentation\/automixiq\/tunedrestdelegate","navigatorTitle":[{"text":"TunedRestDelegate","kind":"identifier"}],"role":"symbol","type":"topic","title":"TunedRestDelegate","abstract":[{"text":"TunedRestDelegate protocol defines the methods to be implemented by a class tasked with providing the credentials to Tuned Global’s backend to Automix SDK, identifiers and cached track data","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TunedRestDelegate","kind":"identifier"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate","kind":"symbol"},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/AutomixSDKStatusObserverDelegate":{"navigatorTitle":[{"text":"AutomixSDKStatusObserverDelegate","kind":"identifier"}],"identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKStatusObserverDelegate","url":"\/documentation\/automixiq\/automixsdkstatusobserverdelegate","role":"symbol","kind":"symbol","type":"topic","title":"AutomixSDKStatusObserverDelegate","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutomixSDKStatusObserverDelegate","kind":"identifier"}],"abstract":[{"type":"text","text":"AutomixSDKStatusObserverDelegate protocol defines the methods to be implemented by a class tasked with observing the status of Automix SDK to reflect it on a UI."}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/TunedRestDelegate/logAutomixSDKMessage(logLevel:message:)":{"abstract":[{"type":"text","text":"Called by AutomixSDK when it wishes to output a log message"}],"kind":"symbol","title":"logAutomixSDKMessage(logLevel:message:)","required":true,"url":"\/documentation\/automixiq\/tunedrestdelegate\/logautomixsdkmessage(loglevel:message:)","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate\/logAutomixSDKMessage(logLevel:message:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"logAutomixSDKMessage"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"logLevel"},{"text":": ","kind":"text"},{"text":"AutomixSDKLogLevel","preciseIdentifier":"c:@M@AutomixIQ@E@AutomixSDKLogLevel","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"message"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"logAutomixSDKMessageWithLogLevel:message:"}]},"doc://org.cocoapods.AutomixIQ/documentation/AutomixIQ/Updating-custom-player's-UI-article":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/Updating-custom-player's-UI-article","title":"Updating custom player’s UI","abstract":[{"type":"text","text":"How to create a UI to reflect the AutomixIQ player"}],"url":"\/documentation\/automixiq\/updating-custom-player's-ui-article"}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","op":"replace","value":"occ"},{"op":"add","value":null,"path":"\/topicSections"},{"op":"replace","value":[{"identifiers":["doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/TunedRestDelegate","doc:\/\/org.cocoapods.AutomixIQ\/documentation\/AutomixIQ\/AutomixSDKCachedMusicProvider"],"title":"Initializing AutomixIQ for use with Tuned Global’s APIs","generated":true}],"path":"\/seeAlsoSections"},{"value":"AutomixSDKCachedMusicProvider","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider\/title","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider\/fragments","op":"replace","value":[{"kind":"identifier","text":"AutomixSDKCachedMusicProvider"}]},{"op":"replace","value":"trackBufferingProgressWithTrackId:progress:","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1trackBufferingProgress(trackId:progress:)\/title"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1trackBufferingProgress(trackId:progress:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"trackBufferingProgressWithTrackId:progress:","kind":"identifier"}]},{"value":"initialised","op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDK~1initialised()\/title"},{"value":[{"text":"+ ","kind":"text"},{"kind":"identifier","text":"initialised"}],"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDK~1initialised()\/fragments"},{"value":"asyncGetAuthenticatedDeviceWithDeviceIdentifierForVendor:completion:","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1asyncGetAuthenticatedDevice(deviceIdentifierForVendor:completion:)\/title","op":"replace"},{"value":[{"text":"- ","kind":"text"},{"text":"asyncGetAuthenticatedDeviceWithDeviceIdentifierForVendor:completion:","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1asyncGetAuthenticatedDevice(deviceIdentifierForVendor:completion:)\/fragments"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1syncGetTrackMetadata(trackId:)\/title","value":"syncGetTrackMetadataWithTrackId:","op":"replace"},{"value":[{"text":"- ","kind":"text"},{"text":"syncGetTrackMetadataWithTrackId:","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1syncGetTrackMetadata(trackId:)\/fragments"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1uniqueDeviceIdentifier()\/title","op":"replace","value":"uniqueDeviceIdentifier"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1uniqueDeviceIdentifier()\/fragments","value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"uniqueDeviceIdentifier"}]},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1syncGetCachedTrack(trackId:)\/title","value":"syncGetCachedTrackWithTrackId:"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1syncGetCachedTrack(trackId:)\/fragments","value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"syncGetCachedTrackWithTrackId:"}]},{"op":"replace","value":"setCachedMusicProvider:","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDK~1setCachedMusicProvider(_:)\/title"},{"op":"replace","value":[{"text":"- ","kind":"text"},{"text":"setCachedMusicProvider:","kind":"identifier"}],"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDK~1setCachedMusicProvider(_:)\/fragments"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1tunedRestTokenExpired(deviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:)\/title","op":"replace","value":"tunedRestTokenExpiredWithDeviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:"},{"value":[{"kind":"text","text":"- "},{"text":"tunedRestTokenExpiredWithDeviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1tunedRestTokenExpired(deviceIdentifierForVendor:countryCode:tunedUserId:oldAccessToken:refreshToken:tokenType:completion:)\/fragments"},{"value":"trackFinishedDownloadingWithTrackId:data:","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1trackFinishedDownloading(trackId:data:)\/title","op":"replace"},{"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKCachedMusicProvider~1trackFinishedDownloading(trackId:data:)\/fragments","op":"replace","value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"trackFinishedDownloadingWithTrackId:data:"}]},{"value":"TunedRestDelegate","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate\/title","op":"replace"},{"value":[{"kind":"identifier","text":"TunedRestDelegate"}],"path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate\/fragments","op":"replace"},{"op":"replace","value":"AutomixSDKStatusObserverDelegate","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStatusObserverDelegate\/title"},{"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1AutomixSDKStatusObserverDelegate\/fragments","value":[{"text":"AutomixSDKStatusObserverDelegate","kind":"identifier"}]},{"op":"replace","value":"logAutomixSDKMessageWithLogLevel:message:","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1logAutomixSDKMessage(logLevel:message:)\/title"},{"value":[{"kind":"text","text":"- "},{"text":"logAutomixSDKMessageWithLogLevel:message:","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1org.cocoapods.AutomixIQ~1documentation~1AutomixIQ~1TunedRestDelegate~1logAutomixSDKMessage(logLevel:message:)\/fragments"}],"traits":[{"interfaceLanguage":"occ"}]}]}